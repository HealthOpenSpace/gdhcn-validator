<?xml version="1.0" encoding="UTF-8"?>
<testcase id="test-case"
	xmlns="http://www.gitb.com/tdl/v1/"
	xmlns:gitb="http://www.gitb.com/core/v1/" >
	<metadata>
		<gitb:name>Test case 1: Hello world</gitb:name>
		<gitb:description>Test case that asks for the user's name and responds by saying hello, and then asks to upload a file</gitb:description>
		<gitb:version>1.0</gitb:version>
	</metadata>
	<actors>
		<!-- Define which test suite actor is the System Under Test (SUT). -->
		<gitb:actor id="User" role="SUT"/>
	</actors>
	<steps>
		<!-- Step 1: Request the user to upload a file -->
		<interact id="userFileUpload" desc="Upload file">
			<request desc="File to upload:" name="uploadedFile" inputType="UPLOAD" required="true"/>
		</interact>
		<!-- Step 2: Decode QR Code -->
		<!-- 1) Build multipart parts list: a single file part named 'image' -->
		<assign to="imgPart{name}">"image"</assign>
		<assign to="imgPart{contentType}">"image/png"</assign>
		<assign to="imgPart{fileName}">"upload.png"</assign>
		<assign to="imgPart{content}">$userFileUpload{uploadedFile}</assign>
		<assign to="sendParts" append="true">$imgPart</assign>
		<assign to="reqHeaders{Accept}">"application/json"</assign>
		<!-- 2) POST http://hcert-validator:8080/decode/image with parts -->
		<send id="img_to_content" desc="Decode QR image" handler="HttpMessagingV2" from="User" to="User" >
			<input name="uri">"http://hcert-validator:8080/decode/image"</input>
			<input name="method">"POST"</input>
			<input name="parts">$sendParts</input>
			<input name="headers">$reqHeaders</input>
		</send>
		<!-- 3) Extract 'raw_data' from JSON response and send to decode/hcert -->
		<process handler="JsonPointerProcessor" operation="process" output="raw_data_value">
			<input name="content">$img_to_content{response}{body}</input>
			<input name="pointer">"/raw_data"</input>
		</process>
		<log>$raw_data_value</log>
		<!-- Prepare JSON payload for decode/hcert -->
		<assign to="tplParams{value}">$raw_data_value</assign>
		<process handler="TemplateProcessor" operation="process" output="requestJson">
			<input name="syntax">"freemarker"</input>
			<!-- Use ?json_string so quotes/backslashes/etc are escaped correctly -->
			<input name="template">'{"qr_data":"${value?json_string}"}'</input>
			<input name="parameters">$tplParams</input>
		</process>
		<log>"Data to decode:"</log>
		<log>$requestJson</log>
		<!-- POST to decode/hcert -->
		<assign to="hc1DecodeHeaders{Content-Type}">"application/json"</assign>
		<send id="decode_hc1" desc="Decode HC1" from="User" to="User" handler="HttpMessagingV2">
			<input name="uri">"http://hcert-validator:8080/decode/hcert"</input>
			<input name="method">"POST"</input>
			<input name="body">$requestJson</input>
			<input name="headers">$hc1DecodeHeaders</input>
		</send>
		<log>$decode_hc1{response}{body}</log>
		<process handler="JsonPointerProcessor" operation="process" output="coseVal">
			<input name="content">$decode_hc1{response}{body}</input>
			<input name="pointer">"/cose"</input>
		</process>
		<process handler="JsonPointerProcessor" operation="process" output="payloadVal">
			<input name="content">$decode_hc1{response}{body}</input>
			<input name="pointer">"/payload"</input>
		</process>
		<log>$payloadVal</log>
		<!-- 2) Build the JSON string safely with FreeMarker -->
		<assign to="tplParams2{cose}">$coseVal</assign>
		<assign to="tplParams2{payload}">$payloadVal</assign>
		<assign to="tpl2Ref">'{"cose":${cose},"payload":${payload}}'</assign>
		<process handler="TemplateProcessor" operation="process" output="requestJson2">
			<input name="syntax">"freemarker"</input>
			<input name="template">$tpl2Ref</input>
			<input name="parameters">$tplParams2</input>
		</process>
		<!-- <log>"Metadata to decode:"</log><log>$requestJson2</log> -->
		<!-- 3) POST to {{base}}/extract/metadata -->
		<assign to="headers{Content-Type}">"application/json"</assign>
		<assign to="extractUrl">"http://hcert-validator:8080/extract/metadata"</assign>
		<send id="extractMeta" desc="Extract metadata" handler="HttpMessagingV2" from="User" to="User" >
			<input name="uri">$extractUrl</input>
			<input name="method">"POST"</input>
			<input name="headers">$headers</input>
			<input name="body">$requestJson2</input>
		</send>
		<!-- (Optional) check 200 and show result to user -->
		<!-- <verify handler="NumberValidator" desc="HTTP status is 200"><input name="actualnumber">$extractMeta{response}{status}</input><input name="expectednumber">"200"</input></verify> -->
		<!-- <log>$extractMeta{response}{body}</log> -->
		<!-- 1) Extract hcert and payload from the previous response -->
		<process handler="JsonPointerProcessor" operation="process" output="hcertVal">
			<input name="content">$decode_hc1{response}{body}</input>
			<input name="pointer">"/hcert"</input>
		</process>
		<process handler="JsonPointerProcessor" operation="process" output="payloadVal">
			<input name="content">$decode_hc1{response}{body}</input>
			<input name="pointer">"/payload"</input>
		</process>
		<!-- 2) Build the JSON body safely -->
		<assign to="tplParams2{hcert}">$hcertVal</assign>
		<assign to="tplParams2{payload}">$payloadVal</assign>
		<assign to="tplRef2">'{"hcert":${hcert},"payload":${payload}}'</assign>
		<process handler="TemplateProcessor" operation="process" output="requestJsonRef">
			<input name="syntax">"freemarker"</input>
			<input name="template">$tplRef2</input>
			<input name="parameters">$tplParams2</input>
		</process>
		<!-- 3) POST to {{base}}/extract/reference -->
		<assign to="headers{Content-Type}">"application/json"</assign>
		<assign to="refUrl">"http://hcert-validator:8080/extract/reference"</assign>
		<send id="extractRef" desc="Extract reference" handler="HttpMessagingV2" from="User" to="User">
			<input name="uri">$refUrl</input>
			<input name="method">"POST"</input>
			<input name="headers">$headers</input>
			<input name="body">$requestJsonRef</input>
		</send>
		<!-- <log>$extractRef{response}{body}</log> -->
		<!-- (Optional) verify and inform user -->
		<verify handler="NumberValidator" desc="HTTP status is 200">
			<input name="actualnumber">$extractRef{response}{status}</input>
			<input name="expectednumber">"200"</input>
		</verify>
		<!-- Open Link -->
		<!-- get URL -->
		<process handler="JsonPointerProcessor" operation="process" output="refUrl">
			<input name="content">$extractRef{response}{body}</input>
			<!-- or $extractReference{response}{body} -->
			<input name="pointer">"/url"</input>
		</process>
		<!-- 2) Ask the user for the PIN -->
		<assign to="pinValue">""</assign>
		<interact id="enterPin" inputTitle="Authorize link" desc="Enter the PIN provided by the service">
			<request desc="Enter a text value:">$pinValue</request>
		</interact>
		<!-- <log>$pinValue</log><log>$refUrl</log> -->
		<!-- 4) Build the JSON body safely (string) -->
		<assign to="tpl3{url}">$refUrl</assign>
		<assign to="tpl3{pin}">$pinValue</assign>
		<assign to="tplRef3">'{"url":"${url}","pin":"${pin}"}'</assign>
		<process handler="TemplateProcessor" operation="process" output="authBody">
			<input name="syntax">"freemarker"</input>
			<input name="template">$tplRef3</input>
			<input name="parameters">$tpl3</input>
		</process>
		<!-- <log>"Auth Body:"</log><log>$authBody</log> -->
		<!-- 5) POST to /shlink/authorize -->
		<assign to="headers{Content-Type}">"application/json"</assign>
		<send id="authorizeLink" desc="Authorize short link" handler="HttpMessagingV2" from="User" to="User">
			<input name="uri">"http://hcert-validator:8080/shlink/authorize"</input>
			<input name="method">"POST"</input>
			<input name="headers">$headers</input>
			<input name="body">$authBody</input>
			<!-- In your ITB build TemplateProcessor returns a string -->
		</send>
		<!-- Optional: verify and show result -->
		<verify handler="NumberValidator" desc="HTTP 200 OK">
			<input name="actualnumber">$authorizeLink{response}{status}</input>
			<input name="expectednumber">"200"</input>
		</verify>
		<!-- <log>$authorizeLink{response}{body}</log> -->
		<process handler="JsonPointerProcessor" operation="process" output="manifestVal">
			<input name="content">$authorizeLink{response}{body}</input>
			<input name="pointer">"/manifest"</input>
		</process>
		<!-- <log>"manifestVal:"</log><log>$manifestVal</log> -->
		<assign to="tpl4{manifest}">$manifestVal</assign>
		<assign to="tplRef4">'{"manifest": ${manifest}}'</assign>
		<!-- Render {"manifest": <raw JSON>} -->
		<process handler="TemplateProcessor" operation="process" output="fetchBody">
			<input name="syntax">"freemarker"</input>
			<!-- Keep it a string literal; CDATA optional but convenient -->
			<input name="template">$tplRef4</input>
			<input name="parameters">$tpl4</input>
		</process>
		<!-- <log>"fetchBody:"</log><log>$fetchBody</log> -->
		<assign to="headers{Content-Type}">"application/json"</assign>
		<assign to="fetchUrl">"http://hcert-validator:8080/shlink/fetch-fhir"</assign>
		<send id="fetchFhir" desc="Fetch FHIR" handler="HttpMessagingV2" from="User" to="User">
			<input name="uri">$fetchUrl</input>
			<input name="method">"POST"</input>
			<input name="headers">$headers</input>
			<input name="body">$fetchBody</input>
			<!-- TemplateProcessor returns a string in your build -->
		</send>
		<!-- Optional checks & user feedback -->
		<verify handler="NumberValidator" desc="HTTP 200 OK">
			<input name="actualnumber">$fetchFhir{response}{status}</input>
			<input name="expectednumber">"200"</input>
		</verify>
		<!-- <log>$fetchFhir{response}{body}</log>
 -->
		<process handler="JsonPointerProcessor" operation="process" output="fhirResource">
			<input name="content">$fetchFhir{response}{body}</input>
			<input name="pointer">"/fhir"</input>
		</process>
		<log>$fhirResource</log>
		<!-- now call the $validate operation on the FHIR server -->
		<!-- <send id="fhirValidation" desc="Validate FHIR content" handler="HttpMessagingV2" from="User" to="User"><input name="uri">$fhirServerUrl</input><input name="method">"POST"</input><input name="headers">$headers</input><input name="body">$fetchBody</input></send> -->
		<process handler="JsonPointerProcessor" operation="process" output="firstResource">
			<input name="content">$fhirResource</input>
			<!-- This is your array string -->
			<input name="pointer">"/0"</input>
		</process>
		<!-- At the start of the test -->
		<assign to="base">"http://fhir-server:8080/fhir/"</assign>
		<assign to="targetProfileUrl">"http://hl7.org/fhir/StructureDefinition/Bundle"</assign>
		<!-- your profile -->
		<!-- Build headers -->
		<assign to="headers{Content-Type}">"application/fhir+json"</assign>
		<assign to="headers{Accept}">"application/fhir+json"</assign>
		<!-- Build query parameters (will be URL-encoded by the handler) -->
		<assign to="params{profile}">$targetProfileUrl</assign>
		<!-- POST $validate with body = $fhirResource (JSON string) -->
		<send id="validationResult" desc="FHIR $validate" handler="HttpMessagingV2" from="User" to="User">
			<input name="uri">$base || "/Bundle/$validate"</input>
			<input name="method">"POST"</input>
			<input name="headers">$headers</input>
			<input name="parameters">$params</input>
			<input name="body">$firstResource</input>
		</send>
		<log>$validationResult</log>
		<!-- Optional checks -->
		<verify handler="NumberValidator" desc="HTTP 200">
			<input name="actualnumber">$validationResult{response}{status}</input>
			<input name="expectednumber">"200"</input>
		</verify>
	</steps>
	<!-- Show a user-friendly message once the test session completes successfully. -->
	<output>
		<success>
			<default>"Test session completed successfully."</default>
		</success>
	</output>
</testcase>